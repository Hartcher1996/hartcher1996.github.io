"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.menuActive = exports.goToCommentHandle = exports.goToBottomHandle = exports.backToTopHandle = exports.sidebarTOC = exports.sideBarTab = exports.sideBarToggleHandle = void 0;
const globalVars_1 = require("../globals/globalVars");
const tools_1 = require("../globals/tools");
const anime_1 = require("../library/anime");
const dom_1 = require("../library/dom");
const sideBarToggleHandle = (event, force) => {
    if (globalVars_1.sideBar.hasClass('on')) {
        globalVars_1.sideBar.removeClass('on');
        globalVars_1.menuToggle.removeClass('close');
        if (force) {
            globalVars_1.sideBar.style = '';
        }
        else {
            (0, anime_1.transition)(globalVars_1.sideBar, 'slideRightOut');
        }
    }
    else {
        if (force) {
            globalVars_1.sideBar.style = '';
        }
        else {
            (0, anime_1.transition)(globalVars_1.sideBar, 'slideRightIn', () => {
                globalVars_1.sideBar.addClass('on');
                globalVars_1.menuToggle.addClass('close');
            });
        }
    }
};
exports.sideBarToggleHandle = sideBarToggleHandle;
const sideBarTab = () => {
    const sideBarInner = globalVars_1.sideBar.child('.inner');
    if (globalVars_1.sideBar.child('.tab')) {
        sideBarInner.removeChild(globalVars_1.sideBar.child('.tab'));
    }
    const list = document.createElement('ul');
    let active = 'active';
    list.className = 'tab';
    ['contents', 'related', 'overview'].forEach((item) => {
        const element = globalVars_1.sideBar.child('.panel.' + item);
        if (element.innerHTML.trim().length < 1) {
            if (item === 'contents') {
                globalVars_1.showContents.display('none');
            }
            return;
        }
        if (item === 'contents') {
            globalVars_1.showContents.display('');
        }
        const tab = document.createElement('li');
        const span = document.createElement('span');
        const text = document.createTextNode(element.attr('data-title'));
        span.appendChild(text);
        tab.appendChild(span);
        tab.addClass(item + ' item');
        if (active) {
            element.addClass(active);
            tab.addClass(active);
        }
        else {
            element.removeClass('active');
        }
        tab.addEventListener('click', (event) => {
            const target = event.currentTarget;
            if (target.hasClass('active'))
                return;
            globalVars_1.sideBar.find('.tab .item').forEach((element) => {
                element.removeClass('active');
            });
            globalVars_1.sideBar.find('.panel').forEach((element) => {
                element.removeClass('active');
            });
            globalVars_1.sideBar.child('.panel.' + target.className.replace(' item', '')).addClass('active');
            target.addClass('active');
        });
        list.appendChild(tab);
        active = '';
    });
    if (list.childNodes.length > 1) {
        sideBarInner.insertBefore(list, sideBarInner.childNodes[0]);
        globalVars_1.sideBar.child('.panels').style.paddingTop = '';
    }
    else {
        globalVars_1.sideBar.child('.panels').style.paddingTop = '.625rem';
    }
};
exports.sideBarTab = sideBarTab;
const sidebarTOC = () => {
    const activateNavByIndex = (index) => {
        const target = navItems[index];
        if (!target)
            return;
        if (target.hasClass('current')) {
            return;
        }
        dom_1.$dom.each('.toc .active', (element) => {
            element && element.removeClass('active current');
        });
        sections.forEach((element) => {
            element && element.removeClass('active');
        });
        target.addClass('active current');
        sections[index] && sections[index].addClass('active');
        let parent = target.parentNode;
        while (!parent.matches('.contents')) {
            if (parent.matches('li')) {
                parent.addClass('active');
                const t = (0, dom_1.$dom)(parent.child('a.toc-link').attr('href'));
                if (t) {
                    t.addClass('active');
                }
            }
            parent = parent.parentNode;
        }
        if (getComputedStyle(globalVars_1.sideBar).display !== 'none' && tocElement.hasClass('active')) {
            (0, anime_1.pageScroll)(tocElement, target.offsetTop - (tocElement.offsetHeight / 4));
        }
    };
    const navItems = dom_1.$dom.all('.contents li');
    if (navItems.length < 1) {
        return;
    }
    let sections = [...navItems];
    let activeLock = null;
    sections = sections.map((element, index) => {
        const link = element.child('a.toc-link');
        const anchor = (0, dom_1.$dom)(decodeURI(link.attr('href')));
        if (!anchor)
            return null;
        const alink = anchor.child('a.anchor');
        const anchorScroll = (event) => {
            event.preventDefault();
            const target = (0, dom_1.$dom)(decodeURI(event.currentTarget.attr('href')));
            activeLock = index;
            (0, anime_1.pageScroll)(target, null, () => {
                activateNavByIndex(index);
                activeLock = null;
            });
        };
        link.addEventListener('click', anchorScroll);
        alink && alink.addEventListener('click', (event) => {
            anchorScroll(event);
            (0, tools_1.clipBoard)(CONFIG.hostname + '/' + LOCAL.path + event.currentTarget.attr('href'));
        });
        return anchor;
    });
    const tocElement = globalVars_1.sideBar.child('.contents.panel');
    const findIndex = (entries) => {
        let index = 0;
        let entry = entries[index];
        if (entry.boundingClientRect.top > 0) {
            index = sections.indexOf(entry.target);
            return index === 0 ? 0 : index - 1;
        }
        for (; index < entries.length; index++) {
            if (entries[index].boundingClientRect.top <= 0) {
                entry = entries[index];
            }
            else {
                return sections.indexOf(entry.target);
            }
        }
        return sections.indexOf(entry.target);
    };
    const createIntersectionObserver = () => {
        const observer = new IntersectionObserver((entries) => {
            const index = findIndex(entries) + (globalVars_1.diffY < 0 ? 1 : 0);
            if (activeLock === null) {
                activateNavByIndex(index);
            }
        }, {
            rootMargin: '0px 0px -100% 0px', threshold: 0
        });
        sections.forEach((element) => {
            element && observer.observe(element);
        });
    };
    createIntersectionObserver();
};
exports.sidebarTOC = sidebarTOC;
const backToTopHandle = () => {
    (0, anime_1.pageScroll)(0);
};
exports.backToTopHandle = backToTopHandle;
const goToBottomHandle = () => {
    (0, anime_1.pageScroll)(parseInt(String(globalVars_1.Container.changeOrGetHeight())));
};
exports.goToBottomHandle = goToBottomHandle;
const goToCommentHandle = () => {
    (0, anime_1.pageScroll)((0, dom_1.$dom)('#comments'));
};
exports.goToCommentHandle = goToCommentHandle;
const menuActive = () => {
    dom_1.$dom.each('.menu .item:not(.title)', (element) => {
        const target = element.child('a[href]');
        const parentItem = element.parentNode.parentNode;
        if (!target)
            return;
        const isSamePath = target.pathname === location.pathname || target.pathname === location.pathname.replace('index.html', '');
        const isSubPath = !CONFIG.root.startsWith(target.pathname) && location.pathname.startsWith(target.pathname);
        const active = target.hostname === location.hostname && (isSamePath || isSubPath);
        element.toggleClass('active', active);
        if (element.parentNode.child('.active') && parentItem.hasClass('dropdown')) {
            parentItem.removeClass('active').addClass('expand');
        }
        else {
            parentItem.removeClass('expand');
        }
    });
};
exports.menuActive = menuActive;
