"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initFireworks = void 0;
const theme_shokax_anime_1 = __importDefault(require("theme-shokax-anime"));
const canvasEl = document.createElement('canvas');
canvasEl.style.cssText = 'position:fixed;top:0;left:0;pointer-events:none;z-index:9999999';
document.body.appendChild(canvasEl);
const ctx = canvasEl.getContext('2d');
const numberOfParticules = 30;
let pointerX = 0;
let pointerY = 0;
const tap = 'click';
const colors = CONFIG.fireworks;
function setCanvasSize() {
    canvasEl.width = window.innerWidth * 2;
    canvasEl.height = window.innerHeight * 2;
    canvasEl.style.width = window.innerWidth + 'px';
    canvasEl.style.height = window.innerHeight + 'px';
    canvasEl.getContext('2d').scale(2, 2);
}
function updateCoords(e) {
    pointerX = e.clientX || (e.touches && e.touches[0].clientX);
    pointerY = e.clientY || (e.touches && e.touches[0].clientY);
}
function setParticuleDirection(p) {
    const angle = theme_shokax_anime_1.default.random(0, 360) * Math.PI / 180;
    const value = theme_shokax_anime_1.default.random(50, 180);
    const radius = [-1, 1][theme_shokax_anime_1.default.random(0, 1)] * value;
    return {
        x: p.x + radius * Math.cos(angle),
        y: p.y + radius * Math.sin(angle)
    };
}
function createParticule(x, y) {
    const p = {
        x,
        y,
        color: undefined,
        radius: undefined,
        endPos: undefined,
        draw() {
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true);
            ctx.fillStyle = p.color;
            ctx.fill();
        }
    };
    p.color = colors[theme_shokax_anime_1.default.random(0, colors.length - 1)];
    p.radius = theme_shokax_anime_1.default.random(16, 32);
    p.endPos = setParticuleDirection(p);
    return p;
}
function createCircle(x, y) {
    const p = {
        x,
        y,
        color: '#FFF',
        radius: 0.1,
        endPos: undefined,
        alpha: 0.5,
        lineWidth: 6,
        draw() {
            ctx.globalAlpha = p.alpha;
            ctx.beginPath();
            ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, true);
            ctx.lineWidth = p.lineWidth;
            ctx.strokeStyle = p.color;
            ctx.stroke();
            ctx.globalAlpha = 1;
        }
    };
    return p;
}
function renderParticule(targets) {
    for (const target of targets) {
        target.draw();
    }
}
function animateParticules(x, y) {
    const circle = createCircle(x, y);
    const particules = [];
    for (let i = 0; i < numberOfParticules; i++) {
        particules.push(createParticule(x, y));
    }
    (0, theme_shokax_anime_1.default)().timeline().add({
        targets: particules,
        duration: theme_shokax_anime_1.default.random(1200, 1800),
        easing: 'easeOutExpo',
        update: renderParticule,
        x: p => p.endPos.x,
        y: p => p.endPos.y,
        radius: 0.1
    }).add({
        targets: circle,
        duration: theme_shokax_anime_1.default.random(1200, 1800),
        easing: 'easeOutExpo',
        update: renderParticule,
        radius: theme_shokax_anime_1.default.random(80, 160),
        lineWidth: 0,
        alpha: {
            value: 0,
            easing: 'linear',
            duration: theme_shokax_anime_1.default.random(600, 800)
        }
    }).play();
}
const render = (0, theme_shokax_anime_1.default)({
    duration: Infinity,
    update() {
        ctx.clearRect(0, 0, canvasEl.width, canvasEl.height);
    }
});
const hasAncestor = (node, name) => {
    name = name.toUpperCase();
    do {
        if (node === null || node === undefined)
            break;
        if (node.nodeName === name)
            return true;
    } while ((node = node.parentNode) !== null);
    return false;
};
function initFireworks() {
    if (typeof CONFIG.fireworks === 'undefined') {
        return;
    }
    document.addEventListener(tap, (e) => {
        if (hasAncestor(e.target, 'a')) {
            return;
        }
        render.play();
        updateCoords(e);
        animateParticules(pointerX, pointerY);
    }, false);
    setCanvasSize();
    window.addEventListener('resize', setCanvasSize, false);
}
exports.initFireworks = initFireworks;
