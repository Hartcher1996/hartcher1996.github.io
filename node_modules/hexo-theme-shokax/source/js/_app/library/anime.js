"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageScroll = exports.transition = void 0;
const theme_shokax_anime_1 = __importDefault(require("theme-shokax-anime"));
const globalVars_1 = require("../globals/globalVars");
const transition = (target, type, complete, begin) => {
    let animation;
    let display = 'none';
    switch (type) {
        case 0:
            animation = { opacity: [1, 0] };
            break;
        case 1:
            animation = { opacity: [0, 1] };
            display = 'block';
            break;
        case 'bounceUpIn':
            animation = {
                begin(anim) {
                    target.display('block');
                },
                translateY: [
                    { value: -60, duration: 200 },
                    { value: 10, duration: 200 },
                    { value: -5, duration: 200 },
                    { value: 0, duration: 200 }
                ],
                opacity: [0, 1]
            };
            display = 'block';
            break;
        case 'shrinkIn':
            animation = {
                begin(anim) {
                    target.display('block');
                },
                scale: [
                    { value: 1.1, duration: 300 },
                    { value: 1, duration: 200 }
                ],
                opacity: 1
            };
            display = 'block';
            break;
        case 'slideRightIn':
            animation = {
                begin(anim) {
                    target.display('block');
                },
                translateX: ['100%', '0%'],
                opacity: [0, 1]
            };
            display = 'block';
            break;
        case 'slideRightOut':
            animation = {
                translateX: ['0%', '100%'],
                opacity: [1, 0]
            };
            break;
        default:
            animation = type;
            display = type.display;
            break;
    }
    (0, theme_shokax_anime_1.default)(Object.assign({
        targets: target,
        duration: 200,
        easing: 'linear',
        begin() {
            begin && begin();
        },
        complete() {
            target.display(display);
            complete && complete();
        }
    }, animation)).play();
};
exports.transition = transition;
const pageScroll = (target, offset, complete) => {
    const opt = {
        targets: typeof offset === 'number' ? target.parentNode : document.scrollingElement,
        duration: 500,
        easing: 'easeInOutQuad',
        scrollTop: offset || (typeof target === 'number' ? target : (target ? target.getTop() + document.documentElement.scrollTop - globalVars_1.siteNavHeight : 0)),
        complete() {
            complete && complete();
        }
    };
    (0, theme_shokax_anime_1.default)(opt).play();
};
exports.pageScroll = pageScroll;
