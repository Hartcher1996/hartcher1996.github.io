"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const dom_1 = require("./dom");
function initProto() {
    Object.assign(HTMLElement.prototype, {
        createChild(tag, obj, positon) {
            const child = document.createElement(tag);
            Object.assign(child, obj);
            switch (positon) {
                case 'after':
                    this.insertAfter(child);
                    break;
                case 'replace':
                    this.innerHTML = '';
                    this.appendChild(child);
                    break;
                default:
                    this.appendChild(child);
            }
            return child;
        },
        wrapObject(obj) {
            const box = document.createElement('div');
            Object.assign(box, obj);
            this.parentNode.insertBefore(box, this);
            this.parentNode.removeChild(this);
            box.appendChild(this);
        },
        changeOrGetHeight(h) {
            if (h) {
                this.style.height = typeof h === 'number' ? h + 'rem' : h;
            }
            return this.getBoundingClientRect().height;
        },
        changeOrGetWidth(w) {
            if (w) {
                this.style.width = typeof w === 'number' ? w + 'rem' : w;
            }
            return this.getBoundingClientRect().width;
        },
        getTop() {
            return this.getBoundingClientRect().top;
        },
        left() {
            return this.getBoundingClientRect().left;
        },
        attr(type, value) {
            if (value === null) {
                return this.removeAttribute(type);
            }
            if (value) {
                this.setAttribute(type, value);
                return this;
            }
            else {
                return this.getAttribute(type);
            }
        },
        insertAfter(element) {
            const parent = this.parentNode;
            if (parent.lastChild === this) {
                parent.appendChild(element);
            }
            else {
                parent.insertBefore(element, this.nextSibling);
            }
        },
        display(d) {
            if (d == null) {
                return this.style.display;
            }
            else {
                this.style.display = d;
                return this;
            }
        },
        child(selector) {
            return (0, dom_1.$dom)(selector, this);
        },
        find(selector) {
            return dom_1.$dom.all(selector, this);
        },
        _class(type, className, display) {
            const classNames = className.indexOf(' ') ? className.split(' ') : [className];
            classNames.forEach((name) => {
                if (type === 'toggle') {
                    this.classList.toggle(name, display);
                }
                else {
                    this.classList[type](name);
                }
            });
        },
        addClass(className) {
            this._class('add', className);
            return this;
        },
        removeClass(className) {
            this._class('remove', className);
            return this;
        },
        toggleClass(className, display) {
            this._class('toggle', className, display);
            return this;
        },
        hasClass(className) {
            return this.classList.contains(className);
        }
    });
}
exports.default = initProto;
