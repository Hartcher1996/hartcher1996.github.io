"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.algoliaSearch = void 0;
const globalVars_1 = require("../globals/globalVars");
const anime_1 = require("../library/anime");
const dom_1 = require("../library/dom");
function algoliaSearch(pjax) {
    if (CONFIG.search === null) {
        return;
    }
    if (!globalVars_1.siteSearch) {
        (0, globalVars_1.setSiteSearch)(globalVars_1.BODY.createChild('div', {
            id: 'search',
            innerHTML: '<div class="inner"><div class="header"><span class="icon"><i class="ic i-search"></i></span><div class="search-input-container"></div><span class="close-btn"><i class="ic i-times-circle"></i></span></div><div class="results"><div class="inner"><div id="search-stats"></div><div id="search-hits"></div><div id="search-pagination"></div></div></div></div>'
        }));
    }
    const search = instantsearch({
        indexName: CONFIG.search.indexName,
        searchClient: algoliasearch(CONFIG.search.appID, CONFIG.search.apiKey),
        searchFunction(helper) {
            const searchInput = (0, dom_1.$dom)('.search-input');
            if (searchInput.value) {
                helper.search();
            }
        }
    });
    search.on('render', () => {
        pjax.refresh((0, dom_1.$dom)('#search-hits'));
    });
    search.addWidgets([
        instantsearch.widgets.configure({
            hitsPerPage: CONFIG.search.hits.per_page || 10
        }),
        instantsearch.widgets.searchBox({
            container: '.search-input-container',
            placeholder: LOCAL.search.placeholder,
            showReset: false,
            showSubmit: false,
            showLoadingIndicator: false,
            cssClasses: {
                input: 'search-input'
            }
        }),
        instantsearch.widgets.stats({
            container: '#search-stats',
            templates: {
                text(data) {
                    const stats = LOCAL.search.stats
                        .replace(/\$\{hits}/, data.nbHits)
                        .replace(/\$\{time}/, data.processingTimeMS);
                    return stats + '<span class="algolia-powered"></span><hr>';
                }
            }
        }),
        instantsearch.widgets.hits({
            container: '#search-hits',
            templates: {
                item(data) {
                    const cats = data.categories ? '<span>' + data.categories.join('<i class="ic i-angle-right"></i>') + '</span>' : '';
                    return '<a href="' + CONFIG.root + data.path + '">' + cats + data._highlightResult.title.value + '</a>';
                },
                empty(data) {
                    return '<div id="hits-empty">' +
                        LOCAL.search.empty.replace(/\$\{query}/, data.query) +
                        '</div>';
                }
            },
            cssClasses: {
                item: 'item'
            }
        }),
        instantsearch.widgets.pagination({
            container: '#search-pagination',
            scrollTo: false,
            showFirst: false,
            showLast: false,
            templates: {
                first: '<i class="ic i-angle-double-left"></i>',
                last: '<i class="ic i-angle-double-right"></i>',
                previous: '<i class="ic i-angle-left"></i>',
                next: '<i class="ic i-angle-right"></i>'
            },
            cssClasses: {
                root: 'pagination',
                item: 'pagination-item',
                link: 'page-number',
                selectedItem: 'current',
                disabledItem: 'disabled-item'
            }
        })
    ]);
    search.start();
    dom_1.$dom.each('.search', (element) => {
        element.addEventListener('click', () => {
            document.body.style.overflow = 'hidden';
            (0, anime_1.transition)(globalVars_1.siteSearch, 'shrinkIn', () => {
                (0, dom_1.$dom)('.search-input').focus();
            });
        });
    });
    const onPopupClose = () => {
        document.body.style.overflow = '';
        (0, anime_1.transition)(globalVars_1.siteSearch, 0);
    };
    globalVars_1.siteSearch.addEventListener('click', (event) => {
        if (event.target === globalVars_1.siteSearch) {
            onPopupClose();
        }
    });
    (0, dom_1.$dom)('.close-btn').addEventListener('click', onPopupClose);
    window.addEventListener('pjax:success', onPopupClose);
    window.addEventListener('keyup', (event) => {
        if (event.key === 'Escape') {
            onPopupClose();
        }
    });
}
exports.algoliaSearch = algoliaSearch;
