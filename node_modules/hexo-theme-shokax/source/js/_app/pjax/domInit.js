"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sidebar_1 = require("../components/sidebar");
const globalVars_1 = require("../globals/globalVars");
const thirdparty_1 = require("../globals/thirdparty");
const dom_1 = require("../library/dom");
const player_1 = require("../player");
function domInit() {
    dom_1.$dom.each('.overview .menu > .item', (el) => {
        globalVars_1.siteNav.child('.menu').appendChild(el.cloneNode(true));
    });
    globalVars_1.loadCat.addEventListener('click', thirdparty_1.Loader.vanish);
    globalVars_1.menuToggle.addEventListener('click', sidebar_1.sideBarToggleHandle);
    (0, dom_1.$dom)('.dimmer').addEventListener('click', sidebar_1.sideBarToggleHandle);
    globalVars_1.quickBtn.child('.down').addEventListener('click', sidebar_1.goToBottomHandle);
    globalVars_1.quickBtn.child('.up').addEventListener('click', sidebar_1.backToTopHandle);
    if (!globalVars_1.toolBtn) {
        (0, globalVars_1.setToolBtn)(globalVars_1.siteHeader.createChild('div', {
            id: 'tool',
            innerHTML: '<div class="item player"></div><div class="item contents"><i class="ic i-list-ol"></i></div><div class="item chat"><i class="ic i-comments"></i></div><div class="item back-to-top"><i class="ic i-arrow-up"></i><span>0%</span></div>'
        }));
    }
    (0, globalVars_1.setToolPlayer)(globalVars_1.toolBtn.child('.player'));
    (0, globalVars_1.setBackToTop)(globalVars_1.toolBtn.child('.back-to-top'));
    (0, globalVars_1.setGoToComment)(globalVars_1.toolBtn.child('.chat'));
    (0, globalVars_1.setShowContents)(globalVars_1.toolBtn.child('.contents'));
    globalVars_1.backToTop.addEventListener('click', sidebar_1.backToTopHandle);
    globalVars_1.goToComment.addEventListener('click', sidebar_1.goToCommentHandle);
    globalVars_1.showContents.addEventListener('click', sidebar_1.sideBarToggleHandle);
    if (typeof player_1.mediaPlayer !== 'undefined') {
        (0, player_1.mediaPlayer)(globalVars_1.toolPlayer);
        (0, dom_1.$dom)('main').addEventListener('click', () => {
            globalVars_1.toolPlayer.player.mini();
        });
    }
    const createIntersectionObserver = () => {
        new IntersectionObserver(([entry]) => {
            if (entry.isIntersecting) {
                document.querySelectorAll('.parallax>use').forEach(i => {
                    i.classList.remove('stop-animation');
                });
                document.querySelectorAll('#imgs .item').forEach(i => {
                    i.classList.remove('stop-animation');
                });
            }
            else {
                document.querySelectorAll('.parallax>use').forEach(i => {
                    i.classList.add('stop-animation');
                });
                document.querySelectorAll('#imgs .item').forEach(i => {
                    i.classList.add('stop-animation');
                });
            }
        }, {
            root: null,
            threshold: 0.2
        }).observe(document.getElementById('waves'));
        new IntersectionObserver(([entry]) => {
            if (entry.isIntersecting) {
                document.querySelectorAll('.with-love>i').forEach(i => {
                    i.classList.remove('stop-animation');
                });
            }
            else {
                document.querySelectorAll('.with-love>i').forEach(i => {
                    i.classList.add('stop-animation');
                });
            }
        }, {
            root: null,
            threshold: 0.2
        }).observe(document.querySelector('.with-love'));
    };
    createIntersectionObserver();
}
exports.default = domInit;
