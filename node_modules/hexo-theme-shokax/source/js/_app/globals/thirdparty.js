"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isOutime = exports.Loader = exports.lazyload = void 0;
const lozad_1 = __importDefault(require("lozad"));
const globalVars_1 = require("./globalVars");
const anime_1 = require("../library/anime");
exports.lazyload = (0, lozad_1.default)('img, [data-background-image]', {
    loaded(el) {
        el.addClass('lozaded');
    }
});
exports.Loader = {
    timer: undefined,
    lock: false,
    show() {
        clearTimeout(this.timer);
        document.body.removeClass('loaded');
        globalVars_1.loadCat.attr('style', 'display:block');
        exports.Loader.lock = false;
    },
    hide(sec) {
        if (!CONFIG.loader.start) {
            sec = -1;
        }
        this.timer = setTimeout(this.vanish, sec || 3000);
    },
    vanish() {
        if (exports.Loader.lock) {
            return;
        }
        if (CONFIG.loader.start) {
            (0, anime_1.transition)(globalVars_1.loadCat, 0);
        }
        document.body.addClass('loaded');
        exports.Loader.lock = true;
    }
};
const isOutime = () => {
    let updateTime;
    if (CONFIG.outime.enable && LOCAL.outime) {
        const times = document.getElementsByTagName('time');
        if (times.length === 0) {
            return;
        }
        const posts = document.getElementsByClassName('body md');
        if (posts.length === 0) {
            return;
        }
        const now = Date.now();
        const pubTime = new Date(times[0].dateTime);
        if (times.length === 1) {
            updateTime = pubTime;
        }
        else {
            updateTime = new Date(times[1].dateTime);
        }
        const interval = parseInt(String(now - updateTime));
        const days = parseInt(String(CONFIG.outime.days)) || 30;
        if (interval > (days * 86400000)) {
            const publish = parseInt(String((now - pubTime) / 86400000));
            const updated = parseInt(String(interval / 86400000));
            const template = LOCAL.template.replace('{{publish}}', String(publish)).replace('{{updated}}', String(updated));
            posts[0].insertAdjacentHTML('afterbegin', template);
        }
    }
};
exports.isOutime = isOutime;
