"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clipBoard = exports.positionInit = exports.pagePosition = exports.showtip = void 0;
const anime_1 = require("../library/anime");
const dom_1 = require("../library/dom");
const storage_1 = require("../library/storage");
const globalVars_1 = require("./globalVars");
const showtip = (msg) => {
    if (!msg) {
        return;
    }
    const tipbox = globalVars_1.BODY.createChild('div', {
        innerHTML: msg,
        className: 'tip'
    });
    setTimeout(() => {
        tipbox.addClass('hide');
        setTimeout(() => {
            globalVars_1.BODY.removeChild(tipbox);
        }, 300);
    }, 3000);
};
exports.showtip = showtip;
const pagePosition = () => {
    if (CONFIG.auto_scroll) {
        storage_1.$storage.set(globalVars_1.LOCAL_URL, String(globalVars_1.scrollAction.y));
    }
};
exports.pagePosition = pagePosition;
const positionInit = (comment) => {
    const anchor = window.location.hash;
    let target = null;
    if (globalVars_1.LOCAL_HASH) {
        storage_1.$storage.del(globalVars_1.LOCAL_URL);
        return;
    }
    if (anchor) {
        target = (0, dom_1.$dom)(decodeURI(anchor));
    }
    else {
        target = CONFIG.auto_scroll ? parseInt(storage_1.$storage.get(globalVars_1.LOCAL_URL)) : 0;
    }
    if (target) {
        (0, anime_1.pageScroll)(target);
        (0, globalVars_1.setLocalHash)(1);
    }
    if (comment && anchor && !globalVars_1.LOCAL_HASH) {
        (0, anime_1.pageScroll)(target);
        (0, globalVars_1.setLocalHash)(1);
    }
};
exports.positionInit = positionInit;
const clipBoard = (str, callback) => {
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(str).then(() => {
            callback && callback(true);
        }, () => {
            callback && callback(false);
        });
    }
    else {
        const ta = globalVars_1.BODY.createChild('textarea', {
            style: {
                top: window.scrollY + 'px',
                position: 'absolute',
                opacity: '0'
            },
            readOnly: true,
            value: str
        });
        const selection = document.getSelection();
        const selected = selection.rangeCount > 0 ? selection.getRangeAt(0) : false;
        ta.select();
        ta.setSelectionRange(0, str.length);
        ta.readOnly = false;
        const result = document.execCommand('copy');
        callback && callback(result);
        ta.blur();
        if (selected) {
            selection.removeAllRanges();
            selection.addRange(selected);
        }
        globalVars_1.BODY.removeChild(ta);
    }
};
exports.clipBoard = clipBoard;
